Chad Bell
cbell4

README project 3

DESIGN
This library contains functions for memory allocation and management. It contains functions for malloc, free, calloc, and realloc.
Programs will run with this library as an environment and use its memory management functions instead of the built in functions in stdlib.h.
This allocator is a BiBOP-style allocator that requests memory from the OS in 4K-size pages. The allocator will split each page into blocks of small sizes (powers of two) along with some metadata indicating the next available block.
The allocator first requests a page that will hold pointers to pages of the memory chunks. The first header block will have a pointer to a page that is separated into chunks of 2 bytes plus metadata; the next header will have a pointer to a page that is separated into chunks of 4 bytes plus metadata. This goes on until a page of chunks of 1024 bytes is formed and the following headers will contain pointers to special pages that allocate sizes greater than 1024 bytes. These are mapped as the user requests them and are unmapped when the user is done with them.
The metadata for the chunks in each page contain a pointer to the next available block. When a block is allocated for the user, the allocator finds the first available chunk of memory and moves the pointer to the first available block to the next chunk, if there is one available. If there is no other chunk available, the allocator requests another page and separates that page into sized chunks, the first page points to the front of the next page and the pointer to the first available block becomes the first chunk of the new page. The allocator returns a pointer to the available chunk of memory.
When the user requests to free a pointer, the allocator will find where the page where that pointer is located, then move the next available chunk pointer to the front of the chunk that is going to be free'd. It's possible that the pointer could be in a differnt page from the first one, so it steps through each page until it is found.
Calloc uses the malloc function the same, but writes a 0 into the data that is allocated.
Realloc uses malloc and free, but it first finds the original size of the pointer to check if the user is allocating space bigger or smaller than they already requested. If the user is requesting less space, then the allocator just returns the original pointer. If the user is requesting larger space, the allocator allocates a new pointer of the new size, copies the data into the new chunk, and frees the original.
KNOWN PROBLEMS
The allocator is not as space efficient as it could be because it needs a pointer to the next available block as metadata for each chunk made. This will end up eating a lot of potential space, particularly for pages of chunks that are 8 bytes or smaller.
